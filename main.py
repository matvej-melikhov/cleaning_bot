import asyncio
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from dotenv import load_dotenv
from database import Database
from scheduler import CleaningScheduler

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()
db = Database()
CHAT_ID = os.getenv("CHAT_ID")

# –°–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—Å—Ç–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
REMINDER_TEXTS = {
    'room': {
        'tomorrow': "–ó–∞–≤—Ç—Ä–∞ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —É–±–∏—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ! üßπ",
        'today': "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —É–±–∏—Ä–∞—Ç—å—Å—è –≤ –∫–æ–º–Ω–∞—Ç–µ! –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /done_room üßπ",
        'overdue': "–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª —É–±–æ—Ä–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∏ –æ—Ç–º–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /done_room üòï"
    },
    'block': {
        'tomorrow': "–ó–∞–≤—Ç—Ä–∞ —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —É–±–∏—Ä–∞—Ç—å—Å—è –≤ –±–ª–æ–∫–µ! üßπ",
        'today': "–°–µ–≥–æ–¥–Ω—è —Ç–≤–æ—è –æ—á–µ—Ä–µ–¥—å —É–±–∏—Ä–∞—Ç—å—Å—è –≤ –±–ª–æ–∫–µ! –ù–µ –∑–∞–±—É–¥—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /done_block üßπ",
        'overdue': "–¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª —É–±–æ—Ä–∫—É –≤ –±–ª–æ–∫–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ –∏ –æ—Ç–º–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /done_block üòï"
    }
}

async def notify_about_cleaning(schedule_type: str, user_identifier: str, reminder_type: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —É–±–æ—Ä–∫–µ"""
    text = REMINDER_TEXTS[schedule_type][reminder_type]
    # –ï—Å–ª–∏ —ç—Ç–æ username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é, –∏–Ω–∞—á–µ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ ID
    if user_identifier.startswith('@'):
        mention = user_identifier
    else:
        mention = f"<a href='tg://user?id={user_identifier}'>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</a>"
    await bot.send_message(CHAT_ID, f"{mention}: {text}", 
                          parse_mode="HTML")

scheduler = CleaningScheduler(db, notify_about_cleaning)

@dp.message(Command("done_room"))
async def cmd_done_room(message: types.Message):
    user_identifier = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    if await db.mark_cleaning_completed('room', user_identifier):
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –£–±–æ—Ä–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üëç")
    else:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —É–±–æ—Ä–∫–∞ –¥–ª—è –≤–∞—Å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /schedule")

@dp.message(Command("done_block"))
async def cmd_done_block(message: types.Message):
    user_identifier = f"@{message.from_user.username}" if message.from_user.username else str(message.from_user.id)
    if await db.mark_cleaning_completed('block', user_identifier):
        await message.reply("–û—Ç–ª–∏—á–Ω–æ! –£–±–æ—Ä–∫–∞ –≤ –±–ª–æ–∫–µ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üëç")
    else:
        await message.reply("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —É–±–æ—Ä–∫–∞ –¥–ª—è –≤–∞—Å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /schedule")

@dp.message(Command("schedule"))
async def cmd_schedule(message: types.Message):
    room_schedule = await db.get_upcoming_schedule('room')
    block_schedule = await db.get_upcoming_schedule('block')
    
    response = "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –¥–µ–∂—É—Ä—Å—Ç–≤–∞:\n\n"
    
    response += "üè† –£–±–æ—Ä–∫–∞ –∫–æ–º–Ω–∞—Ç—ã:\n"
    for user_id, date in room_schedule:
        date_str = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
        response += f"- {date_str}: {user_id}\n"
    
    response += "\nüè¢ –£–±–æ—Ä–∫–∞ –±–ª–æ–∫–∞:\n"
    for user_id, date in block_schedule:
        date_str = datetime.strptime(date, '%Y-%m-%d').strftime('%d.%m.%Y')
        response += f"- {date_str}: {user_id}\n"
    
    await message.reply(response)

@dp.message(Command("stats"))
async def cmd_stats(message: types.Message):
    room_stats = await db.get_user_stats('room')
    block_stats = await db.get_user_stats('block')
    
    response = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–±–æ—Ä–æ–∫:\n\n"
    
    response += "üè† –ö–æ–º–Ω–∞—Ç–∞:\n"
    for user_id, on_time, delayed in room_stats:
        response += f"{user_id}: ‚úÖ{on_time} ‚è∞{delayed}\n"
    
    response += "\nüè¢ –ë–ª–æ–∫:\n"
    for user_id, on_time, delayed in block_stats:
        response += f"{user_id}: ‚úÖ{on_time} ‚è∞{delayed}\n"
    
    await message.reply(response)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/done_room - –æ—Ç–º–µ—Ç–∏—Ç—å —É–±–æ—Ä–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
/done_block - –æ—Ç–º–µ—Ç–∏—Ç—å —É–±–æ—Ä–∫—É –≤ –±–ª–æ–∫–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
/schedule - –ø–æ–∫–∞–∑–∞—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–µ–∂—É—Ä—Å—Ç–≤–∞
/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É–±–æ—Ä–æ–∫
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/my_id - –ø–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
    """
    await message.reply(help_text)

@dp.message(Command("my_id"))
async def cmd_my_id(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    await message.reply(f"ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: {chat_id}\n–í–∞—à ID: {user_id}")

async def main():
    await db.init()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

